<?xml version="1.0" encoding="gb2312"?>
<xsl:stylesheet version="1.0"
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml" indent="no" encoding="gb2312"/>
	<xsl:template match="/html">
		<prices>
			<xsl:for-each select="body/div[@id='hisBor']/table/tbody/tr">
				<xsl:if test="count(td) > 1">
					<item>
						<contract>
							<xsl:call-template name="name2code">
								<xsl:with-param name="contract" select="td[1]"/>
							</xsl:call-template>
						</contract>
						<current><xsl:value-of select="td[3]"/></current>
						<diff><xsl:value-of select="td[5]"/></diff>
						<buy-price><xsl:value-of select="td[7]"/></buy-price>
						<buy-amount><xsl:value-of select="td[9]"/></buy-amount>
						<sell-price><xsl:value-of select="td[11]"/></sell-price>
						<sell-amount><xsl:value-of select="td[13]"/></sell-amount>
						<deal-amount><xsl:value-of select="td[15]"/></deal-amount>
						<open-price><xsl:value-of select="td[17]"/></open-price>
						<last-settlement><xsl:value-of select="td[19]"/></last-settlement>
						<high-price><xsl:value-of select="td[21]"/></high-price>
						<low-price><xsl:value-of select="td[23]"/></low-price>
						<holds><xsl:value-of select="td[25]"/></holds>
						<holds-diff><xsl:value-of select="td[27]"/></holds-diff>
						<diff-percent>
							<xsl:choose>
								<xsl:when test="td[19] > 0">
									<xsl:value-of select="round(td[5]*10000 div td[19]) div 100 "/>
								</xsl:when>
								<xsl:otherwise>0</xsl:otherwise>
							</xsl:choose>
						</diff-percent>
					</item>
				</xsl:if>
			</xsl:for-each>
		</prices>
	</xsl:template>
	
	<xsl:template name="name2code">
		<xsl:param name="contract"/>
		<xsl:choose>
			<xsl:when test="starts-with($contract,'ÃÞ»¨')">
				<xsl:value-of select="concat('CF',substring-after($contract,'ÃÞ»¨'))"/>
			</xsl:when>
			<xsl:when test="starts-with($contract,'ÔçôÌµ¾')">
				<xsl:value-of select="concat('ER',substring-after($contract,'ÔçôÌµ¾'))"/>
			</xsl:when>
			<xsl:when test="starts-with($contract,'²Ë×ÑÓÍ')">
				<xsl:value-of select="concat('RO',substring-after($contract,'²Ë×ÑÓÍ'))"/>
			</xsl:when>
			<xsl:when test="starts-with($contract,'°×ÌÇ')">
				<xsl:value-of select="concat('SR',substring-after($contract,'°×ÌÇ'))"/>
			</xsl:when>
			<xsl:when test="starts-with($contract,'PTA')">
				<xsl:value-of select="concat('TA',substring-after($contract,'PTA'))"/>
			</xsl:when>
			<xsl:when test="starts-with($contract,'Ó²Âó')">
				<xsl:value-of select="concat('WT',substring-after($contract,'Ó²Âó'))"/>
			</xsl:when>
			<xsl:when test="starts-with($contract,'Ç¿Âó')">
				<xsl:value-of select="concat('WS',substring-after($contract,'Ç¿Âó'))"/>
			</xsl:when>
			<xsl:when test="starts-with($contract,'¶¹Ò»')">
				<xsl:value-of select="concat('A',substring-after($contract,'¶¹Ò»'))"/>
			</xsl:when>
			<xsl:when test="starts-with($contract,'¶¹¶þ')">
				<xsl:value-of select="concat('B',substring-after($contract,'¶¹¶þ'))"/>
			</xsl:when>
			<xsl:when test="starts-with($contract,'ÓñÃ×')">
				<xsl:value-of select="concat('C',substring-after($contract,'ÓñÃ×'))"/>
			</xsl:when>
			<xsl:when test="starts-with($contract,'½¹Ì¿') and $contract != '½¹Ì¿'">
				<xsl:value-of select="concat('J',substring-after($contract,'½¹Ì¿'))"/>
			</xsl:when>
			<xsl:when test="starts-with($contract,'¾ÛÒÒÏ©')">
				<xsl:value-of select="concat('L',substring-after($contract,'¾ÛÒÒÏ©'))"/>
			</xsl:when>
			<xsl:when test="starts-with($contract,'¶¹ÆÉ')">
				<xsl:value-of select="concat('M',substring-after($contract,'¶¹ÆÉ'))"/>
			</xsl:when>
			<xsl:when test="starts-with($contract,'×ØéµÓÍ')">
				<xsl:value-of select="concat('P',substring-after($contract,'×ØéµÓÍ'))"/>
			</xsl:when>
			<xsl:when test="starts-with($contract,'¾ÛÂÈÒÒÏ©')">
				<xsl:value-of select="concat('V',substring-after($contract,'¾ÛÂÈÒÒÏ©'))"/>
			</xsl:when>
			<xsl:when test="starts-with($contract,'¶¹ÓÍ')">
				<xsl:value-of select="concat('Y',substring-after($contract,'¶¹ÓÍ'))"/>
			</xsl:when>
			<xsl:when test="starts-with($contract,'»¦ÂÁ')">
				<xsl:value-of select="concat('AL',substring-after($contract,'»¦ÂÁ'))"/>
			</xsl:when>
			<xsl:when test="starts-with($contract,'»Æ½ð')">
				<xsl:value-of select="concat('AU',substring-after($contract,'»Æ½ð'))"/>
			</xsl:when>
			<xsl:when test="starts-with($contract,'»¦Í­')">
				<xsl:value-of select="concat('CU',substring-after($contract,'»¦Í­'))"/>
			</xsl:when>
			<xsl:when test="starts-with($contract,'È¼ÓÍ')">
				<xsl:value-of select="concat('FU',substring-after($contract,'È¼ÓÍ'))"/>
			</xsl:when>
			<xsl:when test="starts-with($contract,'»¦Ç¦')">
				<xsl:value-of select="concat('PB',substring-after($contract,'»¦Ç¦'))"/>
			</xsl:when>
			<xsl:when test="starts-with($contract,'ÂÝÎÆ¸Ö') and not(starts-with($contract,'ÂÝÎÆ¸ÖÎ÷²¿'))">
				<xsl:value-of select="concat('RB',substring-after($contract,'ÂÝÎÆ¸Ö'))"/>
			</xsl:when>
			<xsl:when test="starts-with($contract,'Ïð½º')">
				<xsl:value-of select="concat('RU',substring-after($contract,'Ïð½º'))"/>
			</xsl:when>
			<xsl:when test="starts-with($contract,'Ïß²Ä')">
				<xsl:value-of select="concat('WR',substring-after($contract,'Ïß²Ä'))"/>
			</xsl:when>
			<xsl:when test="starts-with($contract,'»¦Ð¿')">
				<xsl:value-of select="concat('ZN',substring-after($contract,'»¦Ð¿'))"/>
			</xsl:when>
			<xsl:when test="starts-with($contract,'¼×´¼')">
				<xsl:value-of select="concat('ME',substring-after($contract,'¼×´¼'))"/>
			</xsl:when>
			
			<xsl:otherwise><xsl:value-of select="$contract"/></xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	
</xsl:stylesheet>